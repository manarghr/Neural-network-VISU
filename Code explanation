WHAT IS RAYLIB ? 
Raylib is a simple C library designed for creating games and multimedia applications.
It provides functions for handling graphics, audio, window management.

CODE EXPLANATION : 

#include"raylib.h"  --> this library provides functions for graphics, it is used for the creation of the window, the neurons (circles) and the lines (connections).
#include<math.h>    --> this math library in C provides mathematical functions like sin() used to make the neurons move (bounce up and down over time).
#include<stdlib.h>  --> the standard library provides functions for memory allocation, random number generation and program control.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
typedef struct neuron{
   float x, y;              -->  x represents the horizontal position of the neuron, y represents the vertical position of the neuron.
   Color color;             -->  defines the color of the neuron.
   float alpha;
} Neuron;

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Neuron CreateNeuron(float x, float y, Color color, float alpha){
  Neuron neuron ;           --> creating a variable "neuron" of type Neuron.
  neuron.x = x;             --> sets the horizontal position x of the neuron (ex : x=100.0f sets position to 100 pixels from the left of the screen).
  neuron.y = y;             --> sets the vertical position y of the neuron (ex : y=100.0f sets position to 100 pixels from the top of the screen).
  neuron.color = color;     --> sets the color of the neuron ( ex : color=GREEN the neuron will be green).
  neuron.alpha = apha;
return neuron;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

int main (){
InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, "Neural Network Visualization");
    SetTargetFPS(60);         --> sets how fast the window updates (60 frames per second in this case), helps make sure it runs at constant speed.
   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

int num_layers = 5;                             --> number of layers in the neural network.
    int neurons_per_layer[] = {8, 10, 10, 10, 1};     --> an array that has a list of the number of neurons of each layer.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

float layer_spacing = SCREEN_WIDTH / (num_layers + 1);          --> num_layers is 4, so adding 1 ensures that there's some space between first and last layers so num_layers is 5 now.
                                                                    also SCREEN_WIDTH / (num_layers + 1) this division creates how much horizontal space should be allocated for each layer.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Neuron neurons[5][10];     --> 2d array that can hold up 5 layers and up to 10 neurons per layer.

    for (int i = 0; i < num_layers; i++) {                                    --> the outer loop that will iterate over each layer in the neural network (4).
        int num_neurons = neurons_per_layer[i];                               --> the array that holds the number of neurons for each layer.
        float vertical_spacing = SCREEN_HEIGHT / (num_neurons + 1);           --> this devision calculates how much vertical space each neuron in the current layer will occupy.

        for (int j = 0; j < num_neurons; j++) {                               --> the inner loop calculates how much vertical space each neuron in the current layer will occupy.
            float x = (i + 1) * layer_spacing;                                -->calculates the horizontal position (x) for the current neuron.
          float y = (j + 1) * vertical_spacing;                               -->calculates the vertical position (y) for the current neuron.
            Color color = (i == 0) ? BLUE : ((i == num_layers - 1) ? RED : GREEN);         --> assigns a color to the neuron based on which layer it belongs to ( ex : if i=0 it means the input layer so it's blue).
            neurons[i][j] = CreateNeuron(x, y, color, 0.3f);                                     -->creates a neuron using the CreateNeuron function and stores it in the neurons array at the appropriate position.
        }
    }

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    float time = 0.0f;   /*initialize time to 0 to start the program*/
    int active_layer = 0;
    int direction = 1;
    float layer_duration = 2.0;
    float layer_progress = 0.0;


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------





while (!WindowShouldClose()) {                                          --> this loop keeps the program running as long as the window is open.
        time += GetFrameTime();       
        layer_progress += GetFrameTime();

       if (layer_progress > layer_duration)  {
            layer_progress = 0.0;
            active_layer += direction;
            
            if (active_layer == 0 || active_layer == num_layers - 1) {
                direction *= -1;
            }

       }


        BeginDrawing();                                                 --> prepare the screen to begin drawing. 
        ClearBackground(BLACK);                                         --> black background on the window before the drawing.

        /*Connecting the layers*/
        for (int i = 0; i < num_layers - 1; i++) {                      --> outer loop that iterates through the layers of the neural network. And it stops at num_layers - 1 because it connects each layer to the next one.
            int num_neurons_current = neurons_per_layer[i];             --> finding the number of neurons in the current layer.
            int num_neurons_next = neurons_per_layer[i + 1];            --> finding the number of neurons in the next layer.

            for (int j = 0; j < num_neurons_current; j++) {             --> inner loop, j loop iterates through each neuron of the current layer.
                for (int k = 0; k < num_neurons_next; k++) {  --> inner loop 2, k iterates through each neuron of the next layer.
                  float alpha = (i == active_layer || i + 1 == active_layer) ? 0.8f : 0.3f;

                    DrawLineEx(
                        (Vector2){neurons[i][j].x, neurons[i][j].y},
                        (Vector2){neurons[i + 1][k].x, neurons[i + 1][k].y},
                        2.0f,
                        Fade(GRAY, alpha)
                    );
                }
            }
        }       

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/* Draw neurons*/
        for (int i = 0; i < num_layers; i++) {                                                                   --> outer loop that goes through each layer.
            int num_neurons = neurons_per_layer[i];                                                              --> gets the nbr of neurons in each layer.
            for (int j = 0; j < num_neurons; j++) {                                                              --> loop that goes through each neuron in the current layer ( j=0 first neuron, j=1 is the second....).

               if (i== active_layer) {
                neurons[i][j].alpha = 0.3f + 0.7f * fabs(sin(layer_progress / layer_duration * PI ));
                } else {
                    neurons[i][j].alpha = 0.3f;
            }

                DrawCircleV(
                    (Vector2){neurons[i][j].x, neurons[i][j].y},
                    NEURON_RADIUS,
                    Fade(neurons[i][j].color, neurons[i][j].alpha)
                    );
        }
        }

        EndDrawing();
            
    }

    CloseWindow();
    return 0;
}

