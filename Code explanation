WHAT IS RAYLIB ? 
Raylib is a simple C library designed for creating games and multimedia applications.
It provides functions for handling graphics, audio, window management.

CODE EXPLANATION : 

#include"raylib.h"  --> this library provides functions for graphics, it is used for the creation of the window, the neurons (circles) and the lines (connections).
#include<math.h>    --> this math library in C provides mathematical functions like sin() used to make the neurons move (bounce up and down over time).
#include<stdlib.h>  --> the standard library provides functions for memory allocation, random number generation and program control.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define SCREEN_WIDTH 1200   --> the window will be 1200 pixels wide.
#define SCREEN_HEIGHT 600   --> and 600 pixels tall.
#define NEURON_RADIUS 30    --> this defines the the size of each neuron.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

typedef struct neuron{
   float x, y;              -->  x represents the horizontal position of the neuron, y represents the vertical position of the neuron.
   float base_y;            -->  helps keep track of the original position for animation.
   Color color;             -->  defines the color of the neuron.
} Neuron;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Neuron CreateNeuron(float x, float y, Color color){
  Neuron neuron ;           --> creating a variable "neuron" of type Neuron.
  neuron.x = x;             --> sets the horizontal position x of the neuron (ex : x=100.0f sets position to 100 pixels from the left of the screen).
  neuron.y = y;             --> sets the vertical position y of the neuron (ex : y=100.0f sets position to 100 pixels from the top of the screen).
  neuron.base_y = y;        --> keeps track of where the neuron started, if it moves you can refer to this original position).
  neuron.color = color;     --> sets the color of the neuron ( ex : color=GREEN the neuron will be green).
  return neuron;
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

int main (){
InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, "Neural Network Visualization");
    SetTargetFPS(60);         --> sets how fast the window updates (60 frames per second in this case), helps make sure it runs at constant speed.
   
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

int num_layers = 4;                             --> number of layers in the neural network.
    int neurons_per_layer[] = {2, 4, 4, 1};     --> an array that has a list of the number of neurons of each layer.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

float layer_spacing = SCREEN_WIDTH / (num_layers + 1);

num_layers is 4, so by adding 1 ensures that there's some space between first and last layers so num_layers is 5 now.
also SCREEN_WIDTH / (num_layers + 1) this division creates how much horizontal space should be allocated for each layer.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Neuron neurons[10][10];     --> 2d array that can hold up 10 layers and up to 10 neurons per layer.

    for (int i = 0; i < num_layers; i++) {                                    --> the outer loop that will iterate over each layer in the neural network (4).
        int num_neurons = neurons_per_layer[i];                               --> the array that holds the number of neurons for each layer.
        float vertical_spacing = SCREEN_HEIGHT / (num_neurons + 1);           --> this devision calculates how much vertical space each neuron in the current layer will occupy.

        for (int j = 0; j < num_neurons; j++) {                               --> the inner loop calculates how much vertical space each neuron in the current layer will occupy.
            float x = (i + 1) * layer_spacing;                                -->calculates the horizontal position (x) for the current neuron.
          float y = (j + 1) * vertical_spacing;                               -->calculates the vertical position (y) for the current neuron.
            Color color = (i == 0) ? BLUE : ((i == num_layers - 1) ? RED : GREEN);         --> assigns a color to the neuron based on which layer it belongs to ( ex : if i=0 it means the input layer so it's blue).
            neurons[i][j] = CreateNeuron(x, y, color);                                     -->creates a neuron using the CreateNeuron function and stores it in the neurons array at the appropriate position.
        }
    }

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    

